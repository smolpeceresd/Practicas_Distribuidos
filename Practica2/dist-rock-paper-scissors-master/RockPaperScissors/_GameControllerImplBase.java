package RockPaperScissors;


/**
* RockPaperScissors/_GameControllerImplBase.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from RockPaperScissors.idl
* Thursday, April 2, 2015 7:44:39 PM IST
*/

public abstract class _GameControllerImplBase extends org.omg.CORBA.portable.ObjectImpl
                implements RockPaperScissors.GameController, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors
  public _GameControllerImplBase ()
  {
  }

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("NewGame", new java.lang.Integer (0));
    _methods.put ("gameIsReadySynchronous", new java.lang.Integer (1));
    _methods.put ("gameIsReady", new java.lang.Integer (2));
    _methods.put ("SynchronousResult", new java.lang.Integer (3));
    _methods.put ("Result", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  //creates a new instance of game and returns an identifier as well as the ID for the game in the form on an Any
       case 0:  // RockPaperScissors/GameController/NewGame
       {
         org.omg.CORBA.AnyHolder gameIdAny = new org.omg.CORBA.AnyHolder ();
         String $result = null;
         $result = this.NewGame (gameIdAny);
         out = $rh.createReply();
         out.write_string ($result);
         out.write_any (gameIdAny.value);
         break;
       }

       case 1:  // RockPaperScissors/GameController/gameIsReadySynchronous
       {
         int GameID = in.read_long ();
         boolean $result = false;
         $result = this.gameIsReadySynchronous (GameID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  //client passes in the ID it received from the Any and check if they have been matched with an opponent
       case 2:  // RockPaperScissors/GameController/gameIsReady
       {
         RockPaperScissors.GUICallback callback = RockPaperScissors.GUICallbackHelper.read (in);
         int GameID = in.read_long ();
         this.gameIsReady (callback, GameID);
         out = $rh.createReply();
         break;
       }


  //takes the user's choice and their identifier and returns the winner of the game - synchronous blocking call - used by CLI client
       case 3:  // RockPaperScissors/GameController/SynchronousResult
       {
         int GameID = in.read_long ();
         int move = in.read_long ();
         String userNumber = in.read_string ();
         String $result = null;
         $result = this.SynchronousResult (GameID, move, userNumber);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //asynchronous call which uses callbacks - used by GUI client
       case 4:  // RockPaperScissors/GameController/Result
       {
         RockPaperScissors.GUICallback callback = RockPaperScissors.GUICallbackHelper.read (in);
         int GameID = in.read_long ();
         int move = in.read_long ();
         String userNumber = in.read_string ();
         this.Result (callback, GameID, move, userNumber);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:RockPaperScissors/GameController:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }


} // class _GameControllerImplBase
