package RockPaperScissors;


/**
* RockPaperScissors/_GameControllerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from RockPaperScissors.idl
* Thursday, April 2, 2015 7:44:39 PM IST
*/

public class _GameControllerStub extends org.omg.CORBA.portable.ObjectImpl implements RockPaperScissors.GameController
{


  //creates a new instance of game and returns an identifier as well as the ID for the game in the form on an Any
  public String NewGame (org.omg.CORBA.AnyHolder gameIdAny)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("NewGame", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                gameIdAny.value = $in.read_any ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return NewGame (gameIdAny        );
            } finally {
                _releaseReply ($in);
            }
  } // NewGame

  public boolean gameIsReadySynchronous (int GameID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("gameIsReadySynchronous", true);
                $out.write_long (GameID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return gameIsReadySynchronous (GameID        );
            } finally {
                _releaseReply ($in);
            }
  } // gameIsReadySynchronous


  //client passes in the ID it received from the Any and check if they have been matched with an opponent
  public void gameIsReady (RockPaperScissors.GUICallback callback, int GameID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("gameIsReady", false);
                RockPaperScissors.GUICallbackHelper.write ($out, callback);
                $out.write_long (GameID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                gameIsReady (callback, GameID        );
            } finally {
                _releaseReply ($in);
            }
  } // gameIsReady


  //takes the user's choice and their identifier and returns the winner of the game - synchronous blocking call - used by CLI client
  public String SynchronousResult (int GameID, int move, String userNumber)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("SynchronousResult", true);
                $out.write_long (GameID);
                $out.write_long (move);
                $out.write_string (userNumber);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return SynchronousResult (GameID, move, userNumber        );
            } finally {
                _releaseReply ($in);
            }
  } // SynchronousResult


  //asynchronous call which uses callbacks - used by GUI client
  public void Result (RockPaperScissors.GUICallback callback, int GameID, int move, String userNumber)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Result", false);
                RockPaperScissors.GUICallbackHelper.write ($out, callback);
                $out.write_long (GameID);
                $out.write_long (move);
                $out.write_string (userNumber);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Result (callback, GameID, move, userNumber        );
            } finally {
                _releaseReply ($in);
            }
  } // Result

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:RockPaperScissors/GameController:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _GameControllerStub
